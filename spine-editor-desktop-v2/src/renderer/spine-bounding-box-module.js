// üéØ SpineÁ∑®ÈõÜ„Ç∑„Çπ„ÉÜ„É† - „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ„É¢„Ç∏„É•„Éº„É´ (ElectronÁâà)
// ÂΩπÂâ≤: Á∑®ÈõÜÊ©üËÉΩÔºà„Éâ„É©„ÉÉ„Ç∞„Éª„É™„Çµ„Ç§„Ç∫„Éª„Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„ÇπÊìç‰ΩúÔºâ
// Ë§áÈõëÂ∫¶: È´òÔºà„Éè„É≥„Éâ„É´ÁÆ°ÁêÜ„Éª„Éâ„É©„ÉÉ„Ç∞Âá¶ÁêÜ„ÉªÂ∫ßÊ®ôË®àÁÆóÔºâ

console.log('üì¶ Spine Bounding Box Module „É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„ÅøÈñãÂßã');

// ========== „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ„É¢„Ç∏„É•„Éº„É´ ========== //

function createBoundingBoxModule() {
    console.log('üì¶ „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ„É¢„Ç∏„É•„Éº„É´‰ΩúÊàêÈñãÂßã');
    
    const module = {
        boundingBox: null,
        handles: [],
        isActive: false,
        targetElement: null, // üöÄ v3Ê©üËÉΩÁßªÊ§ç: ÂØæË±°Ë¶ÅÁ¥†„ÅÆÂèÇÁÖß‰øùÊåÅ
        targetCharacterId: null, // üöÄ v3Ê©üËÉΩÁßªÊ§ç: ÂÄãÂà•„Ç≠„É£„É©„ÇØ„Çø„ÉºÁâπÂÆöÁî®
        dragState: {
            isDragging: false,
            startPos: { x: 0, y: 0 },
            startElementRect: {},
            activeHandle: null,
            operation: null
        },
        
        // „É¢„Ç∏„É•„Éº„É´ÂàùÊúüÂåñÔºàÂÄãÂà•„Ç≠„É£„É©„ÇØ„Çø„ÉºÂØæÂøúÂº∑ÂåñÔºâ
        initialize: function(targetElement) {
            console.log('üîß „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„ÇπÂàùÊúüÂåñÔºàÂÄãÂà•„Ç≠„É£„É©„ÇØ„Çø„ÉºÂà∂Âæ°Ôºâ');
            
            // üöÄ v3Ê©üËÉΩÁßªÊ§ç: ÂÄãÂà•„Ç≠„É£„É©„ÇØ„Çø„ÉºÁâπÂÆö
            this.targetElement = targetElement;
            this.targetCharacterId = this.identifyCharacter(targetElement);
            console.log(`üéØ ÂØæË±°„Ç≠„É£„É©„ÇØ„Çø„ÉºÁâπÂÆö: ${this.targetCharacterId}`);
            
            // üîß Â∫ßÊ®ôÁ≥ª„Çπ„ÉØ„ÉÉ„ÉóÊ©üËÉΩÔºöË§áÈõëÂ∫ßÊ®ôÁ≥ªÔºà%ÂÄ§+transformÔºâ‚Üí„Ç∑„É≥„Éó„É´Â∫ßÊ®ôÁ≥ªÔºàpxÂÄ§„ÅÆ„ÅøÔºâ
            if (!SpineEditSystem.coordinateSwap.isSwapped) {
                console.log('üîÑ Â∫ßÊ®ôÁ≥ª„Çπ„ÉØ„ÉÉ„ÉóÈñãÂßã: Ë§áÈõëÂ∫ßÊ®ôÁ≥ª‚Üí„Ç∑„É≥„Éó„É´Â∫ßÊ®ôÁ≥ª');
                SpineEditSystem.coordinateSwap.enterEditMode(targetElement);
            }
            
            this.createBoundingBox(targetElement);
            this.setupEventListeners();
            this.setupKeyboardShortcuts(); // üöÄ v3Ê©üËÉΩÁßªÊ§ç: „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„Éº
            this.isActive = true;
        },
        
        // „É¢„Ç∏„É•„Éº„É´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºàÂÄãÂà•„Ç≠„É£„É©„ÇØ„Çø„ÉºÂØæÂøúÂº∑ÂåñÔºâ
        cleanup: function() {
            console.log(`üßπ „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÔºà${this.targetCharacterId}Ôºâ`);
            this.removeBoundingBox();
            this.removeEventListeners();
            this.removeKeyboardShortcuts(); // üöÄ v3Ê©üËÉΩÁßªÊ§ç: „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„ÉºÂâäÈô§
            this.isActive = false;
            
            // üîß Â∫ßÊ®ôÁ≥ªÂæ©ÂÖÉÊ©üËÉΩÔºö„Ç∑„É≥„Éó„É´Â∫ßÊ®ôÁ≥ªÔºàpxÂÄ§„ÅÆ„ÅøÔºâ‚ÜíÂÖÉ„ÅÆË§áÈõëÂ∫ßÊ®ôÁ≥ªÔºà%ÂÄ§+transformÔºâ
            if (this.targetElement && SpineEditSystem.coordinateSwap.isSwapped) {
                console.log('üîÑ Â∫ßÊ®ôÁ≥ªÂæ©ÂÖÉÈñãÂßã: „Ç∑„É≥„Éó„É´Â∫ßÊ®ôÁ≥ª‚ÜíÂÖÉ„ÅÆË§áÈõëÂ∫ßÊ®ôÁ≥ª');
                SpineEditSystem.coordinateSwap.exitEditMode(this.targetElement);
            }
        },
        
        // üõ°Ô∏è skeletonÂ∫ßÊ®ô‰øùË≠∑Ê©üËÉΩ
        protectSkeletonCoordinates: function(characterId, targetElement) {
            try {
                // Spine„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅÆskeletonÊÉÖÂ†±„ÇíÂèñÂæó„Éª‰øùË≠∑
                if (window.spineSkeletonDebug) {
                    for (const [name, skeleton] of window.spineSkeletonDebug) {
                        if (name.includes(characterId) || characterId.includes(name)) {
                            SpineEditSystem.skeletonProtection.backupSkeletonCoords(characterId, skeleton);
                            break;
                        }
                    }
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è skeletonÂ∫ßÊ®ô‰øùË≠∑„Åß„Ç®„É©„ÉºÔºàÁ∑®ÈõÜ„ÅØÁ∂ôÁ∂öÔºâ:', error);
            }
        },
        
        // „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ‰ΩúÊàêÔºàElectronÁâàÔºâ
        createBoundingBox: function(targetElement) {
            const rect = targetElement.getBoundingClientRect();
            const parentRect = targetElement.parentElement.getBoundingClientRect();
            
            // ElectronÁâàÁî®„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„ÉºÂêçÂèñÂæó
            const characterName = targetElement.id || 'Spine Canvas';
            
            // „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„ÇπÊú¨‰ΩìÔºàÈÅ∏Êäû‰∏≠„ÅØÂÆüÁ∑ö„ÄÅ„Çà„ÇäÁõÆÁ´ã„Å§Ëâ≤Ôºâ
            this.boundingBox = document.createElement('div');
            this.boundingBox.id = 'spine-bounding-box';
            // üîß ElectronÁî®„Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ„Çµ„Ç§„Ç∫Ë™øÊï¥
            const boundingWidth = Math.min(rect.width, 300); // ÊúÄÂ§ß300px
            const boundingHeight = Math.min(rect.height, 200); // ÊúÄÂ§ß200px
            
            this.boundingBox.style.cssText = `
                position: absolute;
                border: 2px solid #007acc;
                background: rgba(0, 122, 204, 0.15);
                pointer-events: none;
                z-index: 9999;
                left: ${rect.left - parentRect.left}px;
                top: ${rect.top - parentRect.top}px;
                width: ${boundingWidth}px;
                height: ${boundingHeight}px;
                box-shadow: 0 0 8px rgba(0, 122, 204, 0.3);
            `;
            
            // „Ç≠„É£„É©„ÇØ„Çø„ÉºÂêçË°®Á§∫„É©„Éô„É´ËøΩÂä†
            const label = document.createElement('div');
            label.style.cssText = `
                position: absolute;
                top: -25px;
                left: 0;
                background: #007acc;
                color: white;
                padding: 2px 8px;
                font-size: 12px;
                border-radius: 3px;
                white-space: nowrap;
            `;
            label.textContent = characterName;
            this.boundingBox.appendChild(label);
            
            targetElement.parentElement.appendChild(this.boundingBox);
            
            // „Éè„É≥„Éâ„É´‰ΩúÊàê
            this.createHandles();
            
            // ‰∏≠Â§ÆÁßªÂãï„Ç®„É™„Ç¢‰ΩúÊàê
            this.createCenterArea();
            
            console.log(`üì¶ ${characterName} Áî®„Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ‰ΩúÊàêÂÆå‰∫Ü`);
        },
        
        // „Éè„É≥„Éâ„É´‰ΩúÊàê
        createHandles: function() {
            const handleConfigs = [
                // Ëßí„Éè„É≥„Éâ„É´Ôºà„É™„Çµ„Ç§„Ç∫Áî®Ôºâ
                { position: 'nw', type: 'corner', cursor: 'nw-resize', opposite: 'se' },
                { position: 'ne', type: 'corner', cursor: 'ne-resize', opposite: 'sw' },
                { position: 'sw', type: 'corner', cursor: 'sw-resize', opposite: 'ne' },
                { position: 'se', type: 'corner', cursor: 'se-resize', opposite: 'nw' },
                // Ëæ∫„Éè„É≥„Éâ„É´Ôºà‰∏ÄÊñπÂêë„É™„Çµ„Ç§„Ç∫Áî®Ôºâ
                { position: 'n', type: 'edge', cursor: 'n-resize', opposite: 's' },
                { position: 'e', type: 'edge', cursor: 'e-resize', opposite: 'w' },
                { position: 's', type: 'edge', cursor: 's-resize', opposite: 'n' },
                { position: 'w', type: 'edge', cursor: 'w-resize', opposite: 'e' }
            ];
            
            handleConfigs.forEach(config => {
                const handle = document.createElement('div');
                handle.className = `bbox-handle ${config.type}`;
                handle.dataset.position = config.position;
                handle.dataset.cursor = config.cursor;
                handle.dataset.opposite = config.opposite;
                handle.dataset.type = config.type;
                
                // „Éè„É≥„Éâ„É´„Çπ„Çø„Ç§„É´
                const isCorner = config.type === 'corner';
                handle.style.cssText = `
                    position: absolute;
                    background: #fff;
                    border: 2px solid #667eea;
                    pointer-events: all;
                    z-index: 10001;
                    cursor: ${config.cursor};
                    width: ${isCorner ? '12px' : '8px'};
                    height: ${isCorner ? '12px' : '8px'};
                    border-radius: ${isCorner ? '50%' : '2px'};
                    transition: all 0.1s ease;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
                `;
                
                // „Éè„É≥„Éâ„É´‰ΩçÁΩÆË®≠ÂÆö
                this.positionHandle(handle, config.position, config.type);
                
                // „Éõ„Éê„ÉºÂäπÊûú
                handle.addEventListener('mouseenter', () => {
                    handle.style.background = '#667eea';
                    handle.style.transform = 'scale(1.2)';
                });
                
                handle.addEventListener('mouseleave', () => {
                    handle.style.background = '#fff';
                    handle.style.transform = 'scale(1)';
                });
                
                this.boundingBox.appendChild(handle);
                this.handles.push({ element: handle, config });
            });
            
        },
        
        // „Éè„É≥„Éâ„É´‰ΩçÁΩÆË®≠ÂÆö
        positionHandle: function(handle, position, type) {
            const offset = type === 'corner' ? -6 : -4;
            
            switch(position) {
                case 'nw':
                    handle.style.top = '0';
                    handle.style.left = '0';
                    handle.style.margin = `${offset}px 0 0 ${offset}px`;
                    break;
                case 'ne':
                    handle.style.top = '0';
                    handle.style.right = '0';
                    handle.style.margin = `${offset}px ${offset}px 0 0`;
                    break;
                case 'sw':
                    handle.style.bottom = '0';
                    handle.style.left = '0';
                    handle.style.margin = `0 0 ${offset}px ${offset}px`;
                    break;
                case 'se':
                    handle.style.bottom = '0';
                    handle.style.right = '0';
                    handle.style.margin = `0 ${offset}px ${offset}px 0`;
                    break;
                case 'n':
                    handle.style.top = '0';
                    handle.style.left = '50%';
                    handle.style.transform = `translateX(-50%) translateY(${offset}px)`;
                    break;
                case 'e':
                    handle.style.right = '0';
                    handle.style.top = '50%';
                    handle.style.transform = `translateY(-50%) translateX(${-offset}px)`;
                    break;
                case 's':
                    handle.style.bottom = '0';
                    handle.style.left = '50%';
                    handle.style.transform = `translateX(-50%) translateY(${-offset}px)`;
                    break;
                case 'w':
                    handle.style.left = '0';
                    handle.style.top = '50%';
                    handle.style.transform = `translateY(-50%) translateX(${offset}px)`;
                    break;
            }
        },
        
        // ‰∏≠Â§ÆÁßªÂãï„Ç®„É™„Ç¢‰ΩúÊàê
        createCenterArea: function() {
            const centerArea = document.createElement('div');
            centerArea.className = 'bbox-center-area';
            centerArea.style.cssText = `
                position: absolute;
                top: 20%;
                left: 20%;
                width: 60%;
                height: 60%;
                cursor: move;
                background: transparent;
                pointer-events: all;
                z-index: 9998;
            `;
            
            this.boundingBox.appendChild(centerArea);
        },
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
        setupEventListeners: function() {
            this.mouseDownHandler = this.handleMouseDown.bind(this);
            this.mouseMoveHandler = this.handleMouseMove.bind(this);
            this.mouseUpHandler = this.handleMouseUp.bind(this);
            
            document.addEventListener('mousedown', this.mouseDownHandler);
            document.addEventListener('mousemove', this.mouseMoveHandler);
            document.addEventListener('mouseup', this.mouseUpHandler);
        },
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÂâäÈô§
        removeEventListeners: function() {
            document.removeEventListener('mousedown', this.mouseDownHandler);
            document.removeEventListener('mousemove', this.mouseMoveHandler);
            document.removeEventListener('mouseup', this.mouseUpHandler);
        },
        
        // „Éû„Ç¶„Çπ„ÉÄ„Ç¶„É≥Âá¶ÁêÜ
        handleMouseDown: function(event) {
            const target = event.target;
            
            // „Éè„É≥„Éâ„É´„ÇØ„É™„ÉÉ„ÇØÂà§ÂÆöÔºàËßí„Éè„É≥„Éâ„É´„ÉªËæ∫„Éè„É≥„Éâ„É´Áµ±ÂêàÔºâ
            if (target.classList.contains('bbox-handle')) {
                this.startHandleOperation(event, target);
            } 
            // ‰∏≠Â§ÆÁßªÂãï„Ç®„É™„Ç¢„ÇØ„É™„ÉÉ„ÇØÂà§ÂÆö
            else if (target.classList.contains('bbox-center-area')) {
                this.startMoveOperation(event);
            }
        },
        
        // „Éè„É≥„Éâ„É´Êìç‰ΩúÈñãÂßãÔºàËßí„ÉªËæ∫„Éè„É≥„Éâ„É´Áµ±ÂêàÔºâ
        startHandleOperation: function(event, handle) {
            this.dragState.isDragging = true;
            
            // „Éè„É≥„Éâ„É´„Çø„Ç§„Éó„ÇíÂèñÂæó„Åó„Å¶Êìç‰Ωú„É¢„Éº„Éâ„ÇíÊ±∫ÂÆö
            const handleType = handle.dataset.type || 'corner'; // typeÊú™Ë®≠ÂÆöÊôÇ„ÅØËßí„Éè„É≥„Éâ„É´„Å®„Åø„Å™„Åô
            this.dragState.operation = handleType === 'corner' ? 'corner-resize' : 'edge-resize';
            
            this.dragState.activeHandle = handle;
            this.dragState.startPos = { x: event.clientX, y: event.clientY };
            
            const targetElement = this.targetElement;
            const computedStyle = window.getComputedStyle(targetElement);
            
            // CSSÂÄ§„Åß„ÅÆÂàùÊúüÁä∂ÊÖã„ÇíË®òÈå≤ÔºàÂ∫ßÊ®ôÁ≥ªÁµ±‰∏ÄÔºâ
            this.dragState.startElementRect = {
                left: parseFloat(computedStyle.left),
                top: parseFloat(computedStyle.top),
                width: parseFloat(computedStyle.width),
                height: parseFloat(computedStyle.height)
            };
            
            document.body.style.cursor = handle.dataset.cursor;
            console.log(`üéØ ${handleType} „Éè„É≥„Éâ„É´Êìç‰ΩúÈñãÂßã:`, handle.dataset.position);
            
            event.preventDefault();
            event.stopPropagation();
        },
        
        // ÁßªÂãïÊìç‰ΩúÈñãÂßã
        startMoveOperation: function(event) {
            this.dragState.isDragging = true;
            this.dragState.operation = 'move';
            this.dragState.startPos = { x: event.clientX, y: event.clientY };
            
            const targetElement = this.targetElement;
            const computedStyle = window.getComputedStyle(targetElement);
            this.dragState.startElementRect = {
                left: parseFloat(computedStyle.left),
                top: parseFloat(computedStyle.top)
            };
            
            event.preventDefault();
            event.stopPropagation();
        },
        
        // „Éû„Ç¶„ÇπÁßªÂãïÂá¶ÁêÜ
        handleMouseMove: function(event) {
            if (!this.dragState.isDragging) return;
            
            const deltaX = event.clientX - this.dragState.startPos.x;
            const deltaY = event.clientY - this.dragState.startPos.y;
            
            const modifiers = {
                shift: event.shiftKey,    // Á∏¶Ê®™ÊØî‰øùÊåÅ
                ctrl: event.ctrlKey,      // Windows: ‰∏≠ÂøÉ„Åã„ÇâÊã°Á∏Æ
                alt: event.altKey,        // Mac: ‰∏≠ÂøÉ„Åã„ÇâÊã°Á∏Æ
                meta: event.metaKey       // Mac Command
            };
            
            if (this.dragState.operation === 'move') {
                this.performMove(deltaX, deltaY);
            } else if (this.dragState.operation === 'corner-resize' || this.dragState.operation === 'edge-resize') {
                this.performCornerResize(deltaX, deltaY, modifiers);
            }
        },
        
        // ÁßªÂãïÂÆüË°åÔºà%ÂÄ§Â§âÊèõ„ÅÆÊ†∏ÂøÉÔºâ
        performMove: function(deltaX, deltaY) {
            const targetElement = this.targetElement;
            const parentRect = targetElement.parentElement.getBoundingClientRect();
            
            // üîß ÈáçË¶ÅÔºöpxÂ∫ßÊ®ô„ÅßË®àÁÆó„Åó„Å¶„Åã„Çâ%ÂÄ§„Å´Â§âÊèõ
            const newLeft = this.dragState.startElementRect.left + deltaX;
            const newTop = this.dragState.startElementRect.top + deltaY;
            
            // üîß ÈáçË¶ÅÔºöpxÂÄ§„Åã„Çâ%ÂÄ§„Å∏„ÅÆÂ§âÊèõ
            const newLeftPercent = SpineEditSystem.coords.pxToPercent(newLeft, parentRect.width);
            const newTopPercent = SpineEditSystem.coords.pxToPercent(newTop, parentRect.height);
            
            // üîß ÈáçË¶ÅÔºö%ÂÄ§„ÅßË®≠ÂÆöÔºàÂ∫ßÊ®ôÁ≥ª„Çπ„ÉØ„ÉÉ„Éó‰∏≠„Åß„ÇÇ%ÂÄ§‰ΩøÁî®Ôºâ
            targetElement.style.left = newLeftPercent + '%';
            targetElement.style.top = newTopPercent + '%';
            
            // üîß ÈáçË¶ÅÔºöskeletonÂ∫ßÊ®ô„ÅØÂü∫Êú¨ÁöÑ„Å´Ëß¶„Çâ„Å™„ÅÑ
            // skeletonÂ∫ßÊ®ô„ÅÆÂº∑Âà∂„É™„Çª„ÉÉ„Éà„ÅØÁµ∂ÂØæ„Å´Á¶ÅÊ≠¢
            
            this.updateBoundingBoxPosition(targetElement);
            
            console.log(`üìê ÁßªÂãïÂá¶ÁêÜ: delta(${deltaX}, ${deltaY}) ‚Üí (${newLeftPercent}%, ${newTopPercent}%)`);
        },
        
        // Ëßí„É™„Çµ„Ç§„Ç∫ÂÆüË°åÔºàÂÆåÂÖ®„Å™ÂØæËßíÂõ∫ÂÆöÊã°Á∏ÆÂÆüË£ÖÔºâ
        performCornerResize: function(deltaX, deltaY, modifiers) {
            const targetElement = this.targetElement;
            const handle = this.dragState.activeHandle;
            const position = handle.dataset.position;
            
            console.log('üîß ÂØæËßíÂõ∫ÂÆö„É™„Çµ„Ç§„Ç∫ÈñãÂßã:', { deltaX, deltaY, position, modifiers });
            
            // Â∫ßÊ®ôÁ≥ªÂÆåÂÖ®Áµ±‰∏Ä: ÂÖ®„Å¶getBoundingClientRect„Éô„Éº„Çπ„ÅßÁµ±‰∏Ä
            const rect = targetElement.getBoundingClientRect();
            const parentRect = targetElement.parentElement.getBoundingClientRect();
            
            // ÂÖ®„Å¶„ÅÆÂ∫ßÊ®ô„ÇíË¶™Ë¶ÅÁ¥†Âü∫Ê∫ñ„ÅßÁµ±‰∏Ä
            const currentMouseX = (this.dragState.startPos.x + deltaX) - parentRect.left;
            const currentMouseY = (this.dragState.startPos.y + deltaY) - parentRect.top;
            
            // ÁèæÂú®„ÅÆË¶ÅÁ¥†‰ΩçÁΩÆ„ÇÇË¶™Ë¶ÅÁ¥†Âü∫Ê∫ñ„ÅßÁµ±‰∏Ä
            const currentLeft = rect.left - parentRect.left;
            const currentTop = rect.top - parentRect.top;
            const currentWidth = rect.width;
            const currentHeight = rect.height;
            
            console.log('üîß Áµ±‰∏ÄÂ∫ßÊ®ôÁ≥ªÁ¢∫Ë™ç:', { currentMouseX, currentMouseY, currentLeft, currentTop, currentWidth, currentHeight });
            
            let newWidth, newHeight, newLeft, newTop;
            
            // Ctrl/Alt„Ç≠„Éº: ‰∏≠ÂøÉÂõ∫ÂÆöÊã°Á∏ÆÔºàÂÑ™ÂÖàÂá¶ÁêÜÔºâ
            if (modifiers.ctrl || modifiers.alt) {
                console.log('üîß Ctrl/Alt„Ç≠„Éº‰∏≠ÂøÉÂõ∫ÂÆöÊã°Á∏Æ');
                
                const centerX = currentLeft + currentWidth / 2;
                const centerY = currentTop + currentHeight / 2;
                
                // ‰∏≠ÂøÉ„Åã„Çâ„Éû„Ç¶„Çπ‰ΩçÁΩÆ„Åæ„Åß„ÅÆË∑ùÈõ¢„Çí2ÂÄç„Åó„Åü„ÇÇ„ÅÆ„ÅåÊñ∞„Åó„ÅÑ„Çµ„Ç§„Ç∫
                const deltaFromCenterX = Math.abs(currentMouseX - centerX);
                const deltaFromCenterY = Math.abs(currentMouseY - centerY);
                
                newWidth = Math.max(20, deltaFromCenterX * 2);
                newHeight = Math.max(20, deltaFromCenterY * 2);
                
                // Shift„Ç≠„Éº‰ΩµÁî®ÊôÇ: Á∏¶Ê®™ÊØî‰øùÊåÅ
                if (modifiers.shift) {
                    const aspectRatio = currentWidth / currentHeight;
                    console.log('üîß Ctrl+Shift: ‰∏≠ÂøÉÂõ∫ÂÆö+Á∏¶Ê®™ÊØî‰øùÊåÅ');
                    
                    // „Çà„ÇäÂ§ß„Åç„Å™Â§âÂåñ„Å´Âêà„Çè„Åõ„Çã
                    if (deltaFromCenterX / currentWidth > deltaFromCenterY / currentHeight) {
                        newHeight = newWidth / aspectRatio;
                    } else {
                        newWidth = newHeight * aspectRatio;
                    }
                }
                
                // ‰∏≠ÂøÉÂõ∫ÂÆö„Å™„ÅÆ„Åß‰ΩçÁΩÆ„ÅØ‰∏≠ÂøÉ„Åã„ÇâË®àÁÆó
                newLeft = centerX - newWidth / 2;
                newTop = centerY - newHeight / 2;
                
            } else {
                // üéØ ÂØæËßíÂõ∫ÂÆöÊã°Á∏Æ
                
                // ÂØæËßíÂõ∫ÂÆöÁÇπ„ÇíÂèñÂæó
                let fixedX, fixedY;
                switch(position) {
                    case 'nw': fixedX = currentLeft + currentWidth; fixedY = currentTop + currentHeight; break;  // SEËßíÂõ∫ÂÆö
                    case 'ne': fixedX = currentLeft; fixedY = currentTop + currentHeight; break;                // SWËßíÂõ∫ÂÆö
                    case 'sw': fixedX = currentLeft + currentWidth; fixedY = currentTop; break;                 // NEËßíÂõ∫ÂÆö
                    case 'se': fixedX = currentLeft; fixedY = currentTop; break;                                // NWËßíÂõ∫ÂÆö
                    case 'n': fixedX = currentLeft + currentWidth / 2; fixedY = currentTop + currentHeight; break; // ‰∏ãËæ∫‰∏≠Â§ÆÂõ∫ÂÆö
                    case 'e': fixedX = currentLeft; fixedY = currentTop + currentHeight / 2; break;             // Â∑¶Ëæ∫‰∏≠Â§ÆÂõ∫ÂÆö
                    case 's': fixedX = currentLeft + currentWidth / 2; fixedY = currentTop; break;             // ‰∏äËæ∫‰∏≠Â§ÆÂõ∫ÂÆö
                    case 'w': fixedX = currentLeft + currentWidth; fixedY = currentTop + currentHeight / 2; break; // Âè≥Ëæ∫‰∏≠Â§ÆÂõ∫ÂÆö
                }
                
                // Âü∫Êú¨ÁöÑ„Å™„Çµ„Ç§„Ç∫Ë®àÁÆó
                newWidth = Math.max(20, Math.abs(currentMouseX - fixedX));
                newHeight = Math.max(20, Math.abs(currentMouseY - fixedY));
                
                // Shift„Ç≠„Éº: Á∏¶Ê®™ÊØî‰øùÊåÅ
                if (modifiers.shift) {
                    const aspectRatio = currentWidth / currentHeight;
                    console.log('üîß Shift„Ç≠„ÉºÁ∏¶Ê®™ÊØî‰øùÊåÅ:', { aspectRatio });
                    
                    // „Éû„Ç¶„ÇπÁßªÂãïÈáè„ÅÆÂ§ß„Åç„ÅÑÊñπÂêë„Å´Âêà„Çè„Åõ„Çã
                    const deltaXRatio = Math.abs(currentMouseX - fixedX) / currentWidth;
                    const deltaYRatio = Math.abs(currentMouseY - fixedY) / currentHeight;
                    
                    if (deltaXRatio > deltaYRatio) {
                        // Ê®™ÊñπÂêë„ÅÆÂ§âÂåñ„ÅåÂ§ß„Åç„ÅÑÂ†¥Âêà„ÄÅÂπÖÂü∫Ê∫ñ„ÅßÈ´ò„Åï„ÇíË™øÊï¥
                        newHeight = newWidth / aspectRatio;
                    } else {
                        // Á∏¶ÊñπÂêë„ÅÆÂ§âÂåñ„ÅåÂ§ß„Åç„ÅÑÂ†¥Âêà„ÄÅÈ´ò„ÅïÂü∫Ê∫ñ„ÅßÂπÖ„ÇíË™øÊï¥
                        newWidth = newHeight * aspectRatio;
                    }
                    
                    console.log('üîß Á∏¶Ê®™ÊØî‰øùÊåÅÁµêÊûú:', { newWidth, newHeight });
                }
                
                // ÂØæËßíÂõ∫ÂÆö„Åß„ÅÆ‰ΩçÁΩÆË®àÁÆó
                if (position.includes('corner') || ['nw', 'ne', 'sw', 'se'].includes(position)) {
                    newLeft = Math.min(currentMouseX, fixedX);
                    newTop = Math.min(currentMouseY, fixedY);
                    
                    // Shift„Ç≠„Éº‰ΩøÁî®ÊôÇ„ÅÆ‰ΩçÁΩÆË£úÊ≠£
                    if (modifiers.shift) {
                        switch(position) {
                            case 'nw':
                                newLeft = fixedX - newWidth;
                                newTop = fixedY - newHeight;
                                break;
                            case 'ne':
                                newLeft = fixedX;
                                newTop = fixedY - newHeight;
                                break;
                            case 'sw':
                                newLeft = fixedX - newWidth;
                                newTop = fixedY;
                                break;
                            case 'se':
                                newLeft = fixedX;
                                newTop = fixedY;
                                break;
                        }
                    }
                } else {
                    // Ëæ∫„ÅÆÂ†¥Âêà„ÅØÁâáÂÅ¥„ÅÆ„ÅøÂ§âÊõ¥
                    newLeft = currentLeft;
                    newTop = currentTop;
                    
                    if (position === 'n' || position === 's') {
                        newLeft = fixedX - newWidth / 2;
                        if (position === 'n') newTop = fixedY - newHeight;
                    } else {
                        newTop = fixedY - newHeight / 2;
                        if (position === 'w') newLeft = fixedX - newWidth;
                    }
                }
            }
            
            // üîß ‰øÆÊ≠£ÔºöÂ¢ÉÁïå„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÁ∑©ÂíåÔºàÂØæËßíÂõ∫ÂÆö„ÇíÂÑ™ÂÖàÔºâ
            const parentWidth = parentRect.width;
            const parentHeight = parentRect.height;
            const margin = 10; // 10px„ÅÆ„Éû„Éº„Ç∏„É≥„ÇíË®±ÂèØ
            
            // ÊúÄÂ∞è„Çµ„Ç§„Ç∫„Å®„Éû„Éº„Ç∏„É≥„ÇíËÄÉÊÖÆ„Åó„ÅüÂ¢ÉÁïå„ÉÅ„Çß„ÉÉ„ÇØ
            if (newLeft < -margin || newTop < -margin || 
                newLeft + newWidth > parentWidth + margin || 
                newTop + newHeight > parentHeight + margin ||
                newWidth < 20 || newHeight < 20) {
                console.warn('üö® Â¢ÉÁïåÂà∂Èôê„Å´„Çà„ÇäÈÅ©Áî®„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºà„Éû„Éº„Ç∏„É≥ËÄÉÊÖÆÔºâ');
                console.log('üö® Â¢ÉÁïå„ÉÅ„Çß„ÉÉ„ÇØË©≥Á¥∞:', { 
                    newLeft, newTop, newWidth, newHeight,
                    parentWidth, parentHeight, margin,
                    checks: {
                        leftOK: newLeft >= -margin,
                        topOK: newTop >= -margin,
                        rightOK: newLeft + newWidth <= parentWidth + margin,
                        bottomOK: newTop + newHeight <= parentHeight + margin,
                        widthOK: newWidth >= 20,
                        heightOK: newHeight >= 20
                    }
                });
                return;
            }
            
            // Â∫ßÊ®ô„ÇípxÂÄ§„Å®„Åó„Å¶Áõ¥Êé•ÈÅ©Áî®
            targetElement.style.left = newLeft + 'px';
            targetElement.style.top = newTop + 'px';
            targetElement.style.width = newWidth + 'px';
            targetElement.style.height = newHeight + 'px';
            
            // DOMÊõ¥Êñ∞„ÇíÁ¢∫ÂÆü„Å´ÂèçÊò†„Åï„Åõ„Çã
            targetElement.offsetHeight; // Âº∑Âà∂„É™„Éï„É≠„Éº
            
            console.log('‚úÖ ÂØæËßíÂõ∫ÂÆö„É™„Çµ„Ç§„Ç∫ÂÆå‰∫Ü:', {
                operation: modifiers.ctrl || modifiers.alt ? 'center-fixed' : 'diagonal-fixed',
                modifiers,
                position,
                result: {
                    left: newLeft + 'px',
                    top: newTop + 'px', 
                    width: newWidth + 'px',
                    height: newHeight + 'px'
                }
            });
            
            // „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ‰ΩçÁΩÆÊõ¥Êñ∞
            this.updateBoundingBoxPosition(targetElement);
        },
        
        
        // „Éû„Ç¶„Çπ„Ç¢„ÉÉ„ÉóÂá¶ÁêÜ
        handleMouseUp: function(event) {
            if (!this.dragState.isDragging) return;
            
            this.dragState.isDragging = false;
            this.dragState.operation = null;
            this.dragState.activeHandle = null;
        },
        
        // „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ‰ΩçÁΩÆÊõ¥Êñ∞
        updateBoundingBoxPosition: function(targetElement) {
            const rect = targetElement.getBoundingClientRect();
            const parentRect = targetElement.parentElement.getBoundingClientRect();
            
            this.boundingBox.style.left = (rect.left - parentRect.left) + 'px';
            this.boundingBox.style.top = (rect.top - parentRect.top) + 'px';
            this.boundingBox.style.width = rect.width + 'px';
            this.boundingBox.style.height = rect.height + 'px';
        },
        
        // „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„ÇπÂâäÈô§
        removeBoundingBox: function() {
            if (this.boundingBox) {
                this.boundingBox.remove();
                this.boundingBox = null;
                this.handles = [];
            }
        },
        
        // üöÄ v3Ê©üËÉΩÁßªÊ§ç: „Ç≠„É£„É©„ÇØ„Çø„ÉºÁâπÂÆöÊ©üËÉΩ
        identifyCharacter: function(element) {
            // Ë¶ÅÁ¥†„ÅÆID„ÇÑ„ÇØ„É©„Çπ„Åã„ÇâÁâπÂÆö
            if (element.id) {
                return element.id;
            }
            
            // canvas„ÅÆÂ†¥Âêà„ÄÅË¶™Ë¶ÅÁ¥†„Åã„ÇâÁâπÂÆö
            if (element.tagName === 'CANVAS') {
                const parent = element.parentElement;
                if (parent && parent.id) {
                    return parent.id;
                }
            }
            
            // „Ç≠„É£„É©„ÇØ„Çø„Éº„Çø„Ç§„Éó„ÅÆÊé®ÂÆö
            const classList = Array.from(element.classList || []);
            for (const cls of classList) {
                if (cls.includes('purattokun') || cls.includes('nezumi')) {
                    return cls;
                }
            }
            
            return 'unknown-character';
        },
        
        // üöÄ v3Ê©üËÉΩÁßªÊ§ç: „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„ÉºË®≠ÂÆö
        setupKeyboardShortcuts: function() {
            this.keydownHandler = this.handleKeyDown.bind(this);
            document.addEventListener('keydown', this.keydownHandler);
            console.log('‚å®Ô∏è „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„ÉºË®≠ÂÆöÂÆå‰∫ÜÔºàÁü¢Âç∞„Ç≠„ÉºÁßªÂãïÔºâ');
        },
        
        // üöÄ v3Ê©üËÉΩÁßªÊ§ç: „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„ÉºÂâäÈô§
        removeKeyboardShortcuts: function() {
            if (this.keydownHandler) {
                document.removeEventListener('keydown', this.keydownHandler);
                this.keydownHandler = null;
                console.log('‚å®Ô∏è „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„ÉºÂâäÈô§ÂÆå‰∫Ü');
            }
        },
        
        // üöÄ v3Ê©üËÉΩÁßªÊ§ç: „Ç≠„Éº„Éú„Éº„ÉâÊìç‰Ωú„Éè„É≥„Éâ„É©„ÉºÔºàÁü¢Âç∞„Ç≠„ÉºÁßªÂãïÔºâ
        handleKeyDown: function(event) {
            if (!this.isActive || !this.targetElement) return;
            
            // Áü¢Âç∞„Ç≠„Éº„ÅÆ„ÅøÂá¶ÁêÜ
            const arrowKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];
            if (!arrowKeys.includes(event.code)) return;
            
            event.preventDefault();
            
            // ‰øÆÈ£æ„Ç≠„Éº„Å´„Çà„ÇãÁßªÂãïÈáèË™øÊï¥
            let stepSize = 1; // Âü∫Êú¨ÁßªÂãïÈáèÔºà1pxÔºâ
            if (event.shiftKey) stepSize = 10; // Shift: 10px
            if (event.ctrlKey || event.metaKey) stepSize = 0.1; // Ctrl/Cmd: 0.1pxÔºàÁ≤æÂØÜÁßªÂãïÔºâ
            
            const computedStyle = window.getComputedStyle(this.targetElement);
            const currentLeft = parseFloat(computedStyle.left) || 0;
            const currentTop = parseFloat(computedStyle.top) || 0;
            
            let newLeft = currentLeft;
            let newTop = currentTop;
            
            // ÊñπÂêëÂà•„ÅÆÁßªÂãïÂá¶ÁêÜ
            switch (event.code) {
                case 'ArrowLeft':
                    newLeft = currentLeft - stepSize;
                    break;
                case 'ArrowRight':
                    newLeft = currentLeft + stepSize;
                    break;
                case 'ArrowUp':
                    newTop = currentTop - stepSize;
                    break;
                case 'ArrowDown':
                    newTop = currentTop + stepSize;
                    break;
            }
            
            // ‰ΩçÁΩÆÊõ¥Êñ∞ÔºàpxÂÄ§„ÅßÁõ¥Êé•Ë®≠ÂÆöÔºâ
            this.targetElement.style.left = newLeft + 'px';
            this.targetElement.style.top = newTop + 'px';
            
            // „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ‰ΩçÁΩÆ„ÇÇÂêåÊúü
            this.updateBoundingBoxPosition(this.targetElement);
            
            console.log(`‚å®Ô∏è ${this.targetCharacterId}: Áü¢Âç∞„Ç≠„ÉºÁßªÂãï (${event.code}, ${stepSize}px)`);
        },
        
        // üß™ „ÉÜ„Çπ„Éà„Éª„Éá„Éê„ÉÉ„Ç∞Ê©üËÉΩ
        debugInfo: function() {
            if (!this.isActive || !this.targetElement) {
                console.log('‚ùå „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„ÇπÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ');
                return;
            }
            
            const targetElement = this.targetElement;
            const computedStyle = window.getComputedStyle(targetElement);
            const rect = targetElement.getBoundingClientRect();
            const parentRect = targetElement.parentElement.getBoundingClientRect();
            
            console.group('üîç „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„ÇπË©≥Á¥∞ÊÉÖÂ†±');
            console.log('üìã Âü∫Êú¨ÊÉÖÂ†±:', {
                characterId: this.targetCharacterId,
                isActive: this.isActive,
                isDragging: this.dragState.isDragging
            });
            console.log('üìê CSSÂ∫ßÊ®ô:', {
                left: computedStyle.left,
                top: computedStyle.top,
                width: computedStyle.width,
                height: computedStyle.height,
                transform: computedStyle.transform
            });
            console.log('üìä ÂÆüÈöõ„ÅÆÊèèÁîª‰ΩçÁΩÆ:', {
                screenLeft: rect.left,
                screenTop: rect.top,
                parentRelativeLeft: rect.left - parentRect.left,
                parentRelativeTop: rect.top - parentRect.top,
                width: rect.width,
                height: rect.height
            });
            console.log('üîÑ Â∫ßÊ®ôÁ≥ªÁä∂ÊÖã:', {
                isSwapped: SpineEditSystem.coordinateSwap.isSwapped,
                hasBackup: !!SpineEditSystem.coordinateSwap.backup.left
            });
            
            // skeletonÂ∫ßÊ®ôÁ¢∫Ë™ç
            if (window.spineSkeletonDebug) {
                for (const [name, skeleton] of window.spineSkeletonDebug) {
                    if (name.includes(this.targetCharacterId)) {
                        console.log('ü¶¥ SkeletonÂ∫ßÊ®ô:', {
                            name: name,
                            x: skeleton.x,
                            y: skeleton.y,
                            scaleX: skeleton.scaleX,
                            scaleY: skeleton.scaleY
                        });
                        break;
                    }
                }
            }
            console.groupEnd();
        },
        
        // üß™ ‰øÆÈ£æ„Ç≠„Éº„ÉÜ„Çπ„ÉàÊ©üËÉΩ
        testModifierKeys: function() {
            console.group('üéÆ ‰øÆÈ£æ„Ç≠„Éº„ÉÜ„Çπ„ÉàÂÆüË°å');
            console.log('üìã ‰øÆÈ£æ„Ç≠„ÉºÂØæÂøú‰∏ÄË¶ß:');
            console.log('  - Shift: Á∏¶Ê®™ÊØî‰øùÊåÅ„É™„Çµ„Ç§„Ç∫');
            console.log('  - Ctrl: ‰∏≠ÂøÉÂõ∫ÂÆö„É™„Çµ„Ç§„Ç∫ (Windows)');
            console.log('  - Alt: ‰∏≠ÂøÉÂõ∫ÂÆö„É™„Çµ„Ç§„Ç∫ (Mac)');
            console.log('  - Ctrl+Shift: ‰∏≠ÂøÉÂõ∫ÂÆö+Á∏¶Ê®™ÊØî‰øùÊåÅ');
            console.log('  - Alt+Shift: ‰∏≠ÂøÉÂõ∫ÂÆö+Á∏¶Ê®™ÊØî‰øùÊåÅ');
            console.log('');
            console.log('üéØ „ÉÜ„Çπ„ÉàÊâãÈ†Ü:');
            console.log('  1. Ëßí„Éè„É≥„Éâ„É´„ÇíÂêÑ‰øÆÈ£æ„Ç≠„Éº„Å®ÁµÑ„ÅøÂêà„Çè„Åõ„Å¶„Éâ„É©„ÉÉ„Ç∞');
            console.log('  2. Ëæ∫„Éè„É≥„Éâ„É´„ÇíÂêÑ‰øÆÈ£æ„Ç≠„Éº„Å®ÁµÑ„ÅøÂêà„Çè„Åõ„Å¶„Éâ„É©„ÉÉ„Ç∞');
            console.log('  3. „Ç≥„É≥„ÇΩ„Éº„É´„ÅßÂãï‰Ωú„É≠„Ç∞„ÇíÁ¢∫Ë™ç');
            console.groupEnd();
        }
    };
    
    // „Ç∞„É≠„Éº„Éê„É´„Ç¢„ÇØ„Çª„ÇπÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
    window.SpineEditSystem = SpineEditSystem;
    
    console.log('‚úÖ „Éê„Ç¶„É≥„Éá„Ç£„É≥„Ç∞„Éú„ÉÉ„ÇØ„Çπ„É¢„Ç∏„É•„Éº„É´‰ΩúÊàêÂÆå‰∫Ü');
    return module;
}

console.log('‚úÖ Spine Bounding Box Module „É¢„Ç∏„É•„Éº„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü');

// Global export
window.createBoundingBoxModule = createBoundingBoxModule;