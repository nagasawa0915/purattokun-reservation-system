/**
 * Spine Editor Desktop v2.0 - CSS Export Module
 * CSS生成・位置データ変換機能
 */

export class ExportCSS {
  constructor(exportConfig = {}) {
    this.config = {
      prefix: 'spine-',
      units: 'px',
      precision: 4,
      responsive: true,
      ...exportConfig.css
    };
  }

  /**
   * CSS生成メイン処理
   */
  async generateCSS(project) {
    let css = `/* Generated by Spine Editor Desktop v2.0 */\n\n`;

    if (project.spineData && project.spineData.characters) {
      for (const character of project.spineData.characters) {
        css += this.generateCharacterCSS(character, this.config);
      }
    }

    if (this.config.responsive) {
      css += this.generateResponsiveCSS();
    }

    return css;
  }

  /**
   * キャラクター個別CSS生成
   */
  generateCharacterCSS(character, config) {
    const precision = config.precision || 4;
    const prefix = config.prefix || 'spine-';
    const units = config.units || 'px';

    return `.${prefix}${character.id} {
  position: absolute;
  left: ${(character.x || 0).toFixed(precision)}${units};
  top: ${(character.y || 0).toFixed(precision)}${units};
  transform: scale(${(character.scaleX || 1).toFixed(precision)}, ${(character.scaleY || 1).toFixed(precision)});
  transform-origin: center center;
}

`;
  }

  /**
   * 最適化CSS生成（商用品質）
   */
  async generateOptimizedCSS(project) {
    const character = project.spineData?.characters?.[0];
    if (!character) {
      return '/* No character data */';
    }

    const css = `/* Spine Editor Desktop v2.0 - Optimized CSS */

#purattokun-canvas {
  position: absolute;
  left: ${((character.x || 400) / 800 * 100).toFixed(2)}%;
  top: ${((character.y || 300) / 600 * 100).toFixed(2)}%;
  transform: translate(-50%, -50%) scale(${character.scaleX || 0.5});
  transform-origin: center center;
  z-index: 10;
}

@media (max-width: 768px) {
  #purattokun-canvas {
    width: 30%;
    height: auto;
  }
}`;

    console.log('🎨 Optimized CSS generated');
    return css;
  }

  /**
   * レスポンシブCSS生成
   */
  generateResponsiveCSS() {
    return `
/* Responsive Design */
@media (max-width: 768px) {
  .${this.config.prefix}character {
    transform-origin: center center;
  }
  
  .container {
    padding: 10px;
  }
  
  .controls {
    position: static;
    margin-top: 10px;
    justify-content: center;
  }
  
  .btn {
    padding: 12px 16px;
    font-size: 14px;
  }
}

@media (max-width: 480px) {
  .${this.config.prefix}character {
    max-width: 90%;
    max-height: 90%;
  }
}
`;
  }

  /**
   * 位置データ変換（相対位置→絶対位置）
   */
  convertPositionData(characters, viewport = { width: 800, height: 600 }) {
    return characters.map(character => ({
      ...character,
      x: this.calculateAbsoluteX(character.x, viewport.width),
      y: this.calculateAbsoluteY(character.y, viewport.height),
      scaleX: this.normalizeScale(character.scaleX),
      scaleY: this.normalizeScale(character.scaleY)
    }));
  }

  /**
   * 絶対X座標計算
   */
  calculateAbsoluteX(relativeX, viewportWidth) {
    if (typeof relativeX === 'string' && relativeX.includes('%')) {
      return (parseFloat(relativeX) / 100) * viewportWidth;
    }
    return relativeX || 0;
  }

  /**
   * 絶対Y座標計算
   */
  calculateAbsoluteY(relativeY, viewportHeight) {
    if (typeof relativeY === 'string' && relativeY.includes('%')) {
      return (parseFloat(relativeY) / 100) * viewportHeight;
    }
    return relativeY || 0;
  }

  /**
   * スケール正規化
   */
  normalizeScale(scale) {
    if (typeof scale === 'undefined' || scale === null) return 1.0;
    return Math.max(0.1, Math.min(5.0, parseFloat(scale)));
  }

  /**
   * CSS最小化
   */
  minifyCSS(css) {
    return css
      .replace(/\/\*[\s\S]*?\*\//g, '') // コメント削除
      .replace(/\s+/g, ' ')             // 空白文字正規化
      .replace(/;\s*}/g, '}')           // セミコロン削除
      .replace(/{\s*/g, '{')            // 開き括弧後の空白削除
      .replace(/}\s*/g, '}')            // 閉じ括弧後の空白削除
      .replace(/:\s*/g, ':')            // コロン後の空白削除
      .trim();
  }

  /**
   * CSSバリデーション
   */
  validateCSS(css) {
    const errors = [];
    
    // 基本的なバリデーション
    if (!css.includes('{') || !css.includes('}')) {
      errors.push('Invalid CSS structure');
    }
    
    // 括弧バランスチェック
    const openBraces = (css.match(/{/g) || []).length;
    const closeBraces = (css.match(/}/g) || []).length;
    if (openBraces !== closeBraces) {
      errors.push('Mismatched braces');
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  }

  /**
   * テーマベースCSS生成
   */
  generateThemedCSS(project, theme = 'default') {
    const themes = {
      default: {
        background: '#f0f0f0',
        container: '#ffffff',
        shadow: 'rgba(0,0,0,0.1)'
      },
      dark: {
        background: '#2d3748',
        container: '#4a5568',
        shadow: 'rgba(0,0,0,0.3)'
      },
      colorful: {
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        container: '#ffffff',
        shadow: 'rgba(0,0,0,0.2)'
      }
    };

    const selectedTheme = themes[theme] || themes.default;
    
    let css = this.generateCSS(project);
    
    // テーマスタイル追加
    css += `

/* Theme: ${theme} */
body {
  background: ${selectedTheme.background};
}

.spine-container {
  background: ${selectedTheme.container};
  box-shadow: 0 4px 12px ${selectedTheme.shadow};
}
`;

    return css;
  }

  /**
   * CSS出力用メタデータ生成
   */
  generateCSSMetadata(project) {
    return {
      generator: 'Spine Editor Desktop v2.0 - CSS Module',
      project: project.name || 'Untitled',
      characters: project.spineData?.characters?.length || 0,
      responsive: this.config.responsive,
      precision: this.config.precision,
      generated: new Date().toISOString()
    };
  }

  /**
   * カスタムプロパティCSS生成（CSS Variables）
   */
  generateCustomPropertiesCSS(project) {
    const character = project.spineData?.characters?.[0];
    if (!character) return '';

    return `
/* CSS Custom Properties */
:root {
  --spine-character-x: ${character.x || 0}px;
  --spine-character-y: ${character.y || 0}px;
  --spine-character-scale-x: ${character.scaleX || 1};
  --spine-character-scale-y: ${character.scaleY || 1};
  --spine-character-rotation: ${character.rotation || 0}deg;
}

.${this.config.prefix}character {
  transform: translateX(var(--spine-character-x)) 
             translateY(var(--spine-character-y)) 
             scale(var(--spine-character-scale-x), var(--spine-character-scale-y)) 
             rotate(var(--spine-character-rotation));
}
`;
  }

  /**
   * アニメーション用CSS生成
   */
  generateAnimationCSS(animations = []) {
    let css = '\n/* Animation CSS */\n';

    animations.forEach((animation, index) => {
      css += `
@keyframes spine-animation-${index} {
  0% { opacity: 0; transform: scale(0.8); }
  100% { opacity: 1; transform: scale(1); }
}

.spine-animation-${index} {
  animation: spine-animation-${index} 0.5s ease-out;
}
`;
    });

    return css;
  }

  /**
   * 設定更新
   */
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
  }

  /**
   * デバッグ用CSS情報取得
   */
  getDebugInfo() {
    return {
      config: this.config,
      version: '2.0.0',
      module: 'export-css'
    };
  }
}

// デフォルトエクスポート
export default ExportCSS;