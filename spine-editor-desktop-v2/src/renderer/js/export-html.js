/**
 * Spine Editor Desktop v2.0 - HTML Export Module
 * HTML自動パッチ・テンプレート処理機能
 */

export class ExportHTML {
  constructor(exportConfig = {}) {
    this.config = {
      includeLibrary: true,
      embedAssets: true,
      minify: false,
      responsive: true,
      ...exportConfig.html
    };
  }

  /**
   * HTML生成メイン処理
   */
  async generateHTML(project) {
    const character = project.spineData?.characters?.[0];
    
    const html = `<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${project.name || 'Spine Animation'}</title>
    <link rel="stylesheet" href="styles.css">
    ${this.generateInlineStyles(project)}
</head>
<body>
    <div class="container">
        <div class="spine-container">
            <canvas id="spine-canvas" width="800" height="600"></canvas>
            ${this.generateControls()}
        </div>
    </div>

    <!-- Generated by Spine Editor Desktop v2.0 -->
    ${this.config.includeLibrary ? '<script src="spine-webgl.js"></script>' : ''}
    <script>
        ${this.generateSpineScript(project)}
    </script>
</body>
</html>`;

    return html;
  }

  /**
   * インラインスタイル生成
   */
  generateInlineStyles(project) {
    return `<style>
        body {
            margin: 0;
            padding: 0;
            background: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        .container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        .spine-container {
            position: relative;
        }
        canvas {
            display: block;
            max-width: 100%;
            height: auto;
        }
        .controls {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 5px;
        }
        .btn {
            padding: 8px 12px;
            background: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            transition: background-color 0.2s;
        }
        .btn:hover {
            background: #0056b3;
        }
        ${this.config.responsive ? this.generateResponsiveCSS() : ''}
    </style>`;
  }

  /**
   * コントロール要素生成
   */
  generateControls() {
    return `<div class="controls">
        <button class="btn" onclick="playAnimation()" title="アニメーション再生">▶️ Play</button>
        <button class="btn" onclick="pauseAnimation()" title="アニメーション一時停止">⏸️ Pause</button>
        <button class="btn" onclick="stopAnimation()" title="アニメーション停止">⏹️ Stop</button>
    </div>`;
  }

  /**
   * Spineスクリプト生成
   */
  generateSpineScript(project) {
    return `
// Spine Editor Desktop v2.0 - Generated Script
let canvas, gl, shader, batcher;
let skeleton, animationState;

function initSpine() {
    canvas = document.getElementById('spine-canvas');
    gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    
    if (!gl) {
        console.error('WebGL not supported');
        showError('WebGL is not supported in this browser');
        return;
    }
    
    // Spine初期化処理
    console.log('Spine WebGL initialized');
    loadSpineCharacter();
}

function loadSpineCharacter() {
    // キャラクター読み込み処理
    console.log('Loading Spine character...');
    
    // 実際の実装では、project.spineDataからキャラクターデータを読み込み
    ${this.generateCharacterLoadingCode(project)}
}

function playAnimation(animationName = 'taiki') {
    console.log('Playing animation:', animationName);
    if (animationState) {
        animationState.setAnimation(0, animationName, true);
    }
}

function pauseAnimation() {
    console.log('Pausing animation');
    if (animationState) {
        animationState.timeScale = 0;
    }
}

function stopAnimation() {
    console.log('Stopping animation');
    if (animationState) {
        animationState.clearTracks();
    }
}

function showError(message) {
    const errorDiv = document.createElement('div');
    errorDiv.style.cssText = 'background: #f8d7da; color: #721c24; padding: 10px; border-radius: 4px; margin: 10px; text-align: center;';
    errorDiv.textContent = message;
    document.body.insertBefore(errorDiv, document.body.firstChild);
}

// 自動初期化
window.addEventListener('load', initSpine);

// エラーハンドリング
window.addEventListener('error', function(e) {
    console.error('Script error:', e.error);
    showError('スクリプトエラーが発生しました: ' + (e.error?.message || 'Unknown error'));
});
`;
  }

  /**
   * キャラクター読み込みコード生成
   */
  generateCharacterLoadingCode(project) {
    const character = project.spineData?.characters?.[0];
    if (!character) {
      return '// No character data available';
    }

    return `
    // Character: ${character.id || 'default'}
    const characterConfig = {
        json: '${character.jsonPath ? 'assets/' + (character.id || 'character') + '.json' : ''}',
        atlas: '${character.atlasPath ? 'assets/' + (character.id || 'character') + '.atlas' : ''}',
        scale: ${character.scaleX || 1},
        position: { x: ${character.x || 0}, y: ${character.y || 0} }
    };
    
    if (window.spine && characterConfig.json) {
        // Spine WebGL implementation
        loadSpineCharacterData(characterConfig);
    } else {
        console.warn('Spine WebGL library not available or character data missing');
        showPlaceholder();
    }`;
  }

  /**
   * Homepage統合HTML生成
   */
  async generateHomepageIntegration(project) {
    // ベースHTMLテンプレート取得
    let htmlContent = await this.getHomepageTemplate(project);
    
    if (!htmlContent) {
      // フォールバック: シンプルHTML
      htmlContent = await this.generateStandaloneHTML(project);
    }
    
    // Spine設定をHTMLに埋め込み
    htmlContent = this.injectSpineConfiguration(htmlContent, project);
    
    console.log('🏠 Homepage integration HTML generated');
    return htmlContent;
  }

  /**
   * スタンドアロンHTML生成（完全版）
   */
  async generateStandaloneHTML(project) {
    const character = project.spineData?.characters?.[0];
    
    return `<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${project.name || 'Spine Animation'}</title>
    <meta name="description" content="Spine WebGL animation generated by Spine Editor Desktop v2.0">
    <meta name="generator" content="Spine Editor Desktop v2.0">
    
    <style>
        ${this.generateFullCSS(project)}
    </style>
</head>
<body>
    <div class="spine-app">
        <header class="app-header">
            <h1>${project.name || 'Spine Animation'}</h1>
            <div class="info">Generated by Spine Editor Desktop v2.0</div>
        </header>
        
        <main class="app-main">
            <div class="spine-container">
                <canvas id="spine-canvas" width="800" height="600" aria-label="Spine animation canvas"></canvas>
                
                <div class="controls">
                    <button class="btn btn-primary" onclick="playAnimation()" title="アニメーション再生">
                        <span class="btn-icon">▶️</span>
                        <span class="btn-text">Play</span>
                    </button>
                    <button class="btn btn-secondary" onclick="pauseAnimation()" title="アニメーション一時停止">
                        <span class="btn-icon">⏸️</span>
                        <span class="btn-text">Pause</span>
                    </button>
                    <button class="btn btn-danger" onclick="stopAnimation()" title="アニメーション停止">
                        <span class="btn-icon">⏹️</span>
                        <span class="btn-text">Stop</span>
                    </button>
                </div>
                
                <div class="loading-overlay" id="loading-overlay">
                    <div class="loading-spinner"></div>
                    <div class="loading-text">Loading Spine animation...</div>
                </div>
            </div>
        </main>
        
        <footer class="app-footer">
            <div class="character-info">
                ${character ? `Character: ${character.id || 'Default'}` : 'No character loaded'}
            </div>
            <div class="tech-info">
                WebGL | Spine Runtime
            </div>
        </footer>
    </div>

    <script src="spine-webgl.js"></script>
    <script>
        ${this.generateAdvancedSpineScript(project)}
    </script>
</body>
</html>`;
  }

  /**
   * フルCSS生成
   */
  generateFullCSS(project) {
    return `
        /* Spine Editor Desktop v2.0 - Full CSS */
        * {
            box-sizing: border-box;
        }
        
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .spine-app {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        
        .app-header {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            padding: 1rem;
            text-align: center;
            color: white;
        }
        
        .app-header h1 {
            margin: 0;
            font-size: 1.5rem;
            font-weight: 300;
        }
        
        .app-header .info {
            font-size: 0.8rem;
            opacity: 0.8;
            margin-top: 0.5rem;
        }
        
        .app-main {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 2rem;
        }
        
        .spine-container {
            position: relative;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            padding: 2rem;
            max-width: 90vw;
            max-height: 80vh;
        }
        
        #spine-canvas {
            display: block;
            max-width: 100%;
            height: auto;
            border-radius: 8px;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        .btn {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.2s ease;
            min-width: 80px;
        }
        
        .btn-primary {
            background: #007bff;
            color: white;
        }
        
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        
        .btn-danger {
            background: #dc3545;
            color: white;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .loading-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            border-radius: 12px;
        }
        
        .loading-overlay.hidden {
            display: none;
        }
        
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .loading-text {
            margin-top: 1rem;
            color: #666;
            font-size: 0.9rem;
        }
        
        .app-footer {
            background: rgba(0, 0, 0, 0.1);
            color: rgba(255, 255, 255, 0.8);
            padding: 1rem;
            text-align: center;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.8rem;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .app-main {
                padding: 1rem;
            }
            
            .spine-container {
                padding: 1rem;
            }
            
            .controls {
                flex-wrap: wrap;
                gap: 0.5rem;
            }
            
            .btn {
                flex: 1;
                min-width: auto;
                padding: 0.6rem 1rem;
                font-size: 0.8rem;
            }
            
            .btn-text {
                display: none;
            }
            
            .app-footer {
                flex-direction: column;
                gap: 0.5rem;
            }
        }
        
        @media (max-width: 480px) {
            .app-header h1 {
                font-size: 1.2rem;
            }
            
            .spine-container {
                margin: 0.5rem;
                padding: 0.75rem;
            }
        }`;
  }

  /**
   * 高度なSpineスクリプト生成
   */
  generateAdvancedSpineScript(project) {
    return `
// Spine Editor Desktop v2.0 - Advanced Script
class SpineApp {
    constructor() {
        this.canvas = null;
        this.gl = null;
        this.skeleton = null;
        this.animationState = null;
        this.isLoading = true;
        this.currentAnimation = 'taiki';
    }

    async init() {
        try {
            this.showLoading(true);
            
            this.canvas = document.getElementById('spine-canvas');
            this.gl = this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl');
            
            if (!this.gl) {
                throw new Error('WebGL not supported');
            }
            
            console.log('Spine WebGL initialized');
            
            // キャラクター読み込み
            await this.loadCharacter();
            
            // 初期アニメーション開始
            this.playAnimation('syutugen');
            
            this.showLoading(false);
            
        } catch (error) {
            console.error('Spine initialization failed:', error);
            this.showError(error.message);
            this.showLoading(false);
        }
    }

    async loadCharacter() {
        // キャラクターデータ読み込み処理
        ${this.generateCharacterLoadingCode(project)}
        
        console.log('Spine character loaded successfully');
    }

    playAnimation(animationName = this.currentAnimation, loop = true) {
        console.log('Playing animation:', animationName);
        this.currentAnimation = animationName;
        
        if (this.animationState) {
            this.animationState.setAnimation(0, animationName, loop);
        } else {
            console.warn('Animation state not initialized');
        }
    }

    pauseAnimation() {
        console.log('Pausing animation');
        if (this.animationState) {
            this.animationState.timeScale = 0;
        }
    }

    stopAnimation() {
        console.log('Stopping animation');
        if (this.animationState) {
            this.animationState.clearTracks();
            this.animationState.timeScale = 1;
        }
    }

    showLoading(show) {
        const overlay = document.getElementById('loading-overlay');
        if (overlay) {
            overlay.classList.toggle('hidden', !show);
        }
        this.isLoading = show;
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = \`
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #f8d7da;
            color: #721c24;
            padding: 12px 20px;
            border-radius: 6px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 1000;
            max-width: 90%;
            text-align: center;
        \`;
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        
        // 5秒後に自動削除
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 5000);
    }
}

// グローバル変数
let spineApp;

// グローバル関数（ボタンから呼び出し）
function playAnimation(name) {
    if (spineApp) spineApp.playAnimation(name);
}

function pauseAnimation() {
    if (spineApp) spineApp.pauseAnimation();
}

function stopAnimation() {
    if (spineApp) spineApp.stopAnimation();
}

// 自動初期化
window.addEventListener('load', () => {
    spineApp = new SpineApp();
    spineApp.init();
});

// ページ離脱時のクリーンアップ
window.addEventListener('beforeunload', () => {
    if (spineApp) {
        spineApp.stopAnimation();
    }
});
`;
  }

  /**
   * Homepageテンプレート取得
   */
  async getHomepageTemplate(project) {
    if (!project.homepageFolder || !window.electronAPI) {
      return null;
    }
    
    try {
      const indexPath = `${project.homepageFolder}/index.html`;
      const result = await window.electronAPI.readFile(indexPath);
      
      if (result.success) {
        console.log('🏠 Homepage template loaded from:', indexPath);
        return result.data;
      }
    } catch (error) {
      console.warn('⚠️ Failed to load homepage template:', error);
    }
    
    return null;
  }

  /**
   * Spine設定をHTMLに注入
   */
  injectSpineConfiguration(htmlContent, project) {
    const character = project.spineData?.characters?.[0];
    if (!character) return htmlContent;
    
    // purattokun-config セクションを更新
    const configSection = `
<div id="purattokun-config" style="display: none;"
     data-x="${(character.x / 800 * 100).toFixed(1)}"
     data-y="${(character.y / 600 * 100).toFixed(1)}"
     data-scale="${character.scaleX || 0.5}"
     data-fade-delay="1500"
     data-fade-duration="2000">
</div>`;
    
    // 既存の設定を置換または追加
    if (htmlContent.includes('id="purattokun-config"')) {
      htmlContent = htmlContent.replace(
        /<div id="purattokun-config"[\s\S]*?<\/div>/,
        configSection.trim()
      );
    } else {
      htmlContent = htmlContent.replace(
        '</head>',
        `  ${configSection}\n</head>`
      );
    }
    
    return htmlContent;
  }

  /**
   * レスポンシブCSS生成
   */
  generateResponsiveCSS() {
    return `
@media (max-width: 768px) {
    .container {
        padding: 10px;
    }
    .controls {
        position: static;
        margin-top: 10px;
        justify-content: center;
        flex-wrap: wrap;
    }
    .btn {
        padding: 12px 16px;
        font-size: 14px;
        min-width: 70px;
    }
    #spine-canvas {
        max-width: 100%;
        height: auto;
    }
}

@media (max-width: 480px) {
    .spine-container {
        padding: 10px;
    }
    .btn {
        padding: 10px 12px;
        font-size: 12px;
        min-width: 60px;
    }
    .btn-text {
        display: none;
    }
}`;
  }

  /**
   * HTML最小化
   */
  minifyHTML(html) {
    if (!this.config.minify) return html;
    
    return html
      .replace(/<!--[\s\S]*?-->/g, '') // コメント削除
      .replace(/>\s+</g, '><')          // タグ間の空白削除
      .replace(/\s+/g, ' ')             // 連続空白を単一空白に
      .trim();
  }

  /**
   * HTMLバリデーション
   */
  validateHTML(html) {
    const errors = [];
    
    // 基本的なHTML構造チェック
    if (!html.includes('<!DOCTYPE html>')) {
      errors.push('Missing DOCTYPE declaration');
    }
    
    if (!html.includes('<html') || !html.includes('</html>')) {
      errors.push('Missing html tag');
    }
    
    if (!html.includes('<head>') || !html.includes('</head>')) {
      errors.push('Missing head section');
    }
    
    if (!html.includes('<body>') || !html.includes('</body>')) {
      errors.push('Missing body section');
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  }

  /**
   * メタタグ生成
   */
  generateMetaTags(project) {
    return `
    <meta name="description" content="${project.description || 'Spine WebGL Animation'}">
    <meta name="keywords" content="spine, webgl, animation, ${project.name || ''}">
    <meta name="author" content="Spine Editor Desktop v2.0">
    <meta name="generator" content="Spine Editor Desktop v2.0">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <!-- Open Graph -->
    <meta property="og:title" content="${project.name || 'Spine Animation'}">
    <meta property="og:description" content="${project.description || 'Spine WebGL Animation'}">
    <meta property="og:type" content="website">
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary">
    <meta name="twitter:title" content="${project.name || 'Spine Animation'}">
    <meta name="twitter:description" content="${project.description || 'Spine WebGL Animation'}">`;
  }

  /**
   * プリロード要素生成
   */
  generatePreloadLinks(project) {
    let preloads = '';
    
    if (project.spineData?.characters) {
      for (const character of project.spineData.characters) {
        const id = character.id || 'character';
        preloads += `
    <link rel="preload" href="assets/${id}.json" as="fetch" crossorigin="anonymous">
    <link rel="preload" href="assets/${id}.atlas" as="fetch" crossorigin="anonymous">
    <link rel="preload" href="assets/${id}.png" as="image">`;
      }
    }
    
    preloads += `
    <link rel="preload" href="spine-webgl.js" as="script">`;
    
    return preloads;
  }

  /**
   * 設定更新
   */
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
  }

  /**
   * デバッグ用HTML情報取得
   */
  getDebugInfo() {
    return {
      config: this.config,
      version: '2.0.0',
      module: 'export-html'
    };
  }
}

// デフォルトエクスポート
export default ExportHTML;